version: '3.8'

services:
  # Your Go Application
  # wanderwise-api-dev:
  #   container_name: wanderwise-api-dev
  #   build:
  #     context: . # Assuming Dockerfile is in the root
  #     dockerfile: Dockerfile # Your Go app's Dockerfile
  #     target: dev
  #   env_file:
  #     - .env # Load .env for the Go app container
  #   ports:
  #     - "${HTTP_PORT}:${HTTP_PORT}"   # Expose API port (e.g., 6666:6666)
  #     - "${METRICS_PORT}:${METRICS_PORT}" # Expose metrics port (e.g., 9090:9090)
  #     - "40000:40000"
  #   volumes:
  #     - .:/app # Mount current directory to /app in container
  #     - ./scripts:/scripts # Mount scripts directory for init scripts
  #   depends_on:
  #     - postgres-wanderwise
  #     - otel-collector # Wait for collector to be available
  #   networks:
  #     - observability-net
  #     - wanderwise-net # Connect to DB network

  # PostgreSQL Database (with PostGIS & pgvector)
  postgres-wanderwise:
    container_name: postgres-wanderwise
    build:
      context: . 
      dockerfile: Dockerfile.pg
    env_file:
      - .env # Load .env for postgres container setup (POSTGRES_DB etc)
    environment:
      # Override or add specific PG settings if needed, otherwise defaults are used
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # Optional: Expose DB port to host *only* for local development/debugging
      # Be careful exposing DB ports directly
      - "5454:5432" # Map host 5454 -> container 5432
    volumes:
      - postgres-wanderwise-data:/var/lib/postgresql/data
      - ./scripts/postgres/init:/docker-entrypoint-initdb.d # Your extensions script
    restart: unless-stopped
    networks:
      - wanderwise-net # Separate network for DB?

  # --- Grafana Stack ---

  # OpenTelemetry Collector (Receives OTLP, exports to Tempo/Loki/Prometheus)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest # Use contrib for more receivers/exporters
    container_name: otel-collector
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    volumes:
      - ./app/observability/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver (optional)
      # - "1888:1888" # pprof extension
      # - "8888:8888" # Prometheus exporter for collector's own metrics
      # - "13133:13133" # health_check extension
    depends_on:
      - tempo
      - loki # Add if exporting logs via OTLP
      - prometheus # Add if exporting metrics via OTLP -> remote_write
    networks:
      - observability-net

  # Tempo (Traces)
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./app/observability/tempo-config.yaml:/etc/tempo.yaml
      - tempo-data:/var/tempo # Persist trace data (optional for local dev)
    ports:
      # - "14268:14268" # Jaeger grpc
      - "3200:3200"   # Tempo grpc
      # - "4317" # OTLP gRPC, often handled by collector
    networks:
      - observability-net

  # Prometheus (Metrics Scraper & Storage)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command: ["--config.file=/etc/prometheus/prometheus.yml", "--web.enable-lifecycle"]
    volumes:
      - ./app/observability/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9091:9090" # Prometheus UI on host:9091
    networks:
      - observability-net

  # Loki (Logs - Optional, can configure Go app or collector to send logs)
  loki:
    image: grafana/loki:latest
    container_name: loki
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./app/observability/loki-config.yaml:/etc/loki/local-config.yaml
    ports:
      - "3100:3100" # Loki API port
    networks:
      - observability-net

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./app/observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    ports:
      - "3001:3000" # Grafana UI on host:3001
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin # Change in production!
    depends_on:
      - prometheus
      - tempo
      # - loki
    networks:
      - observability-net


volumes:
  postgres-wanderwise-data:
  tempo-data:
  prometheus-data:
  grafana-data:

networks:
  wanderwise-net: # Network for App <-> DB
    driver: bridge
  observability-net: # Network for Observability Stack + App connection
    driver: bridge