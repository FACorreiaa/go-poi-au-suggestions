// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/email": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated user to change their email address after verifying their password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Change User Email",
                "parameters": [
                    {
                        "description": "Password verification and new email",
                        "name": "email_change",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ChangeEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email Updated Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (Invalid password or bad token)",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns JWT access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Login",
                        "schema": {
                            "$ref": "#/definitions/types.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Authentication Failed",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidates the user's current session/refresh token. Typically uses Refresh Token from HttpOnly cookie. Body might be empty or contain refresh token if not using cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User Logout",
                "parameters": [
                    {
                        "description": "Logout Request (only needed if sending refresh_token in body)",
                        "name": "token",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/types.LogoutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout Successful",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., malformed body if used)",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/password": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated user to change their own password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Change User Password",
                "parameters": [
                    {
                        "description": "Old and New Passwords",
                        "name": "passwords",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ChangePasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password Updated Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (Invalid old password or bad token)",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Provides a new access token using a valid refresh token (typically sent via HttpOnly cookie). Body might be empty or contain refresh token if not using cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Access Token",
                "parameters": [
                    {
                        "description": "Refresh Token Request (only needed if sending refresh_token in body)",
                        "name": "token",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/types.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Access Token (Refresh Token set in cookie)",
                        "schema": {
                            "$ref": "#/definitions/types.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request (e.g., missing token)",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid or Expired Refresh Token",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/refresh-session": {
            "post": {
                "description": "Refreshes a user's session using a refresh token provided in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh User Session",
                "parameters": [
                    {
                        "description": "Refresh Token",
                        "name": "token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Access Token",
                        "schema": {
                            "$ref": "#/definitions/types.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Invalid or Expired Refresh Token",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Creates a new user account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register New User",
                "parameters": [
                    {
                        "description": "User Registration Details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Registered Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "409": {
                        "description": "Email or Username already exists",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/auth/validate": {
            "post": {
                "description": "Checks if a session ID is valid and returns user information if it is.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Validate User Session",
                "parameters": [
                    {
                        "description": "Session ID to validate",
                        "name": "session",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ValidateSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Session validation result with user info if valid",
                        "schema": {
                            "$ref": "#/definitions/types.ValidateSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/poi/city/{cityID}": {
            "get": {
                "description": "Retrieves all points of interest for a specific city",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POI"
                ],
                "summary": "Get POIs by City ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "City ID",
                        "name": "cityID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of POIs in the city",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/poi/favourites": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all points of interest that the authenticated user has marked as favourites",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POI"
                ],
                "summary": "Get User's Favourite POIs",
                "responses": {
                    "200": {
                        "description": "List of favourite POIs",
                        "schema": {
                            "type": "array",
                            "items": {}
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a point of interest to the user's favourites list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POI"
                ],
                "summary": "Add POI to Favourites",
                "parameters": [
                    {
                        "description": "POI ID to add to favourites",
                        "name": "poi",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddPoiRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "POI added to favourites successfully",
                        "schema": {}
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a point of interest from the user's favourites list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POI"
                ],
                "summary": "Remove POI from Favourites",
                "parameters": [
                    {
                        "description": "POI ID to remove from favourites",
                        "name": "poi",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.AddPoiRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "POI removed from favourites successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/custom-interests/{interestID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a specific interest created by the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Preferences"
                ],
                "summary": "Update Custom Interest",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the custom interest to update",
                        "name": "interestID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "interest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateinterestsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interest Updated Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Input or Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "403": {
                        "description": "Forbidden (Interest does not belong to user)",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "Interest Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict (e.g., duplicate name for user)",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/interests": {
            "get": {
                "description": "Retrieves all available interests.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All Interests",
                "responses": {
                    "200": {
                        "description": "All Interests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Interest"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/interests/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new interest in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create New Interest",
                "parameters": [
                    {
                        "description": "Interest details to create",
                        "name": "interest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateInterestRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Interest",
                        "schema": {
                            "$ref": "#/definitions/types.Interest"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "409": {
                        "description": "Interest Already Exists",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/preferences": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the authenticated user's preferences (profiles).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Preferences",
                "responses": {
                    "200": {
                        "description": "User Preferences",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.settings"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/preferences/interests/{interestId}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes an interest from the authenticated user's preferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Remove User Interest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Interest ID to remove",
                        "name": "interestId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Interest Removed Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "Interest Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/preferences/{profileID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's preferences (profiles).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Preferences",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "profileID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Preferences Update Parameters",
                        "name": "preferences",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdatesettingsParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Preferences Updated Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the authenticated user's profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Profile",
                "responses": {
                    "200": {
                        "description": "User Profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserProfile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the authenticated user's profile information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Profile",
                "parameters": [
                    {
                        "description": "Profile Update Parameters",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateProfileParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile Updated Successfully",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Input",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/profiles": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches all preference profiles for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Get User Preference Profiles",
                "responses": {
                    "200": {
                        "description": "User Preference Profiles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.UserPreferenceProfileResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new preference profile for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Create User Preference Profile",
                "parameters": [
                    {
                        "description": "Profile Creation Parameters",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.CreateUserPreferenceProfileParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserPreferenceProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/profiles/default": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches the default preference profile for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Get Default User Preference Profile",
                "responses": {
                    "200": {
                        "description": "Default User Preference Profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserPreferenceProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/profiles/default/{profileID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sets an existing preference profile as the default for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Set Default User Preference Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "profileID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Default User Preference Profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserPreferenceProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/profiles/{profileID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches a specific preference profile for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Get User Preference Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "profileID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Preference Profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserPreferenceProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing preference profile for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Update User Preference Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "profileID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Profile Update Parameters",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.UpdateUserPreferenceProfileParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Profile",
                        "schema": {
                            "$ref": "#/definitions/types.UserPreferenceProfileResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing preference profile for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Profiles"
                ],
                "summary": "Delete User Preference Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Profile ID",
                        "name": "profileID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        },
        "/user/tags": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all tags created by the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Tags"
                ],
                "summary": "Get All User Tags",
                "responses": {
                    "200": {
                        "description": "User Tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Tags"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/types.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.AddPoiRequest": {
            "type": "object",
            "properties": {
                "poi_id": {
                    "type": "string"
                }
            }
        },
        "types.ChangeEmailRequest": {
            "type": "object",
            "required": [
                "new_email",
                "password"
            ],
            "properties": {
                "new_email": {
                    "description": "Desired new email address.",
                    "type": "string",
                    "example": "new.email@example.com"
                },
                "password": {
                    "description": "User's current password for verification.",
                    "type": "string",
                    "example": "currentPassword123"
                }
            }
        },
        "types.ChangePasswordRequest": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "description": "User's desired new password.",
                    "type": "string",
                    "minLength": 8,
                    "example": "NewStr0ngP@ss!"
                },
                "old_password": {
                    "description": "User's current password.",
                    "type": "string",
                    "example": "currentPassword123"
                }
            }
        },
        "types.CreateInterestRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "active": {
                    "type": "boolean",
                    "example": true
                },
                "description": {
                    "type": "string",
                    "example": "Outdoor hiking activities"
                },
                "name": {
                    "type": "string",
                    "example": "Hiking"
                }
            }
        },
        "types.CreateUserPreferenceProfileParams": {
            "type": "object",
            "required": [
                "profile_name",
                "user_id"
            ],
            "properties": {
                "budget_level": {
                    "type": "integer"
                },
                "dietary_needs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_default": {
                    "description": "Default is FALSE in DB",
                    "type": "boolean"
                },
                "prefer_accessible_pois": {
                    "type": "boolean"
                },
                "prefer_dog_friendly": {
                    "type": "boolean"
                },
                "prefer_outdoor_seating": {
                    "type": "boolean"
                },
                "preferred_pace": {
                    "$ref": "#/definitions/types.SearchPace"
                },
                "preferred_time": {
                    "$ref": "#/definitions/types.DayPreference"
                },
                "preferred_transport": {
                    "$ref": "#/definitions/types.TransportPreference"
                },
                "preferred_vibes": {
                    "description": "Use empty slice if not provided?",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_name": {
                    "type": "string"
                },
                "search_radius_km": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_id": {
                    "description": "Added for clarity",
                    "type": "string"
                }
            }
        },
        "types.DayPreference": {
            "type": "string",
            "enum": [
                "any",
                "day",
                "night"
            ],
            "x-enum-comments": {
                "DayPreferenceAny": "No specific preference",
                "DayPreferenceDay": "Primarily daytime activities",
                "DayPreferenceNight": "Primarily evening/night activities"
            },
            "x-enum-varnames": [
                "DayPreferenceAny",
                "DayPreferenceDay",
                "DayPreferenceNight"
            ]
        },
        "types.Interest": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "Use pointer if nullable",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address for login.",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password.",
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "types.LoginResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "Short-lived JWT access token.",
                    "type": "string",
                    "example": "eyJhbGciOiJI..."
                },
                "message": {
                    "description": "Confirmation message.",
                    "type": "string",
                    "example": "Login successful"
                },
                "refresh_token": {
                    "description": "Longer-lived refresh token (often set in HttpOnly cookie instead).",
                    "type": "string",
                    "example": "4f1trt8s..."
                }
            }
        },
        "types.LogoutRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "description": "Refresh token to invalidate.",
                    "type": "string"
                }
            }
        },
        "types.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "description": "The refresh token obtained during login.",
                    "type": "string",
                    "example": "4f1trt8s..."
                }
            }
        },
        "types.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "User's email address. Must be unique.",
                    "type": "string",
                    "example": "newuser@example.com"
                },
                "password": {
                    "description": "User's desired password (min length 8).",
                    "type": "string",
                    "minLength": 8,
                    "example": "Str0ngP@ss!"
                },
                "role": {
                    "description": "Optional role assignment (defaults server-side if empty).",
                    "type": "string",
                    "example": "user"
                },
                "username": {
                    "description": "Desired username. Must be unique.",
                    "type": "string",
                    "example": "testuser"
                }
            }
        },
        "types.Response": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Optional error message.",
                    "type": "string",
                    "example": "Resource not found"
                },
                "message": {
                    "description": "Optional success message.",
                    "type": "string",
                    "example": "Operation successful"
                },
                "success": {
                    "description": "Indicates if the operation was successful.",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "types.SearchPace": {
            "type": "string",
            "enum": [
                "any",
                "relaxed",
                "moderate",
                "fast"
            ],
            "x-enum-comments": {
                "SearchPaceAny": "No preference",
                "SearchPaceFast": "Pack in many activities",
                "SearchPaceModerate": "Standard pace",
                "SearchPaceRelaxed": "Fewer, longer activities"
            },
            "x-enum-varnames": [
                "SearchPaceAny",
                "SearchPaceRelaxed",
                "SearchPaceModerate",
                "SearchPaceFast"
            ]
        },
        "types.Tags": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "tag_type": {
                    "description": "Consider using a specific enum type",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "The new short-lived JWT access token.",
                    "type": "string",
                    "example": "eyJhbGciOiJI..."
                },
                "refresh_token": {
                    "description": "The *new* longer-lived refresh token (if rotation is enabled, often set in cookie).",
                    "type": "string",
                    "example": "9a8b7c..."
                }
            }
        },
        "types.TransportPreference": {
            "type": "string",
            "enum": [
                "any",
                "walk",
                "public",
                "car"
            ],
            "x-enum-varnames": [
                "TransportPreferenceAny",
                "TransportPreferenceWalk",
                "TransportPreferencePublic",
                "TransportPreferenceCar"
            ]
        },
        "types.UpdateProfileParams": {
            "type": "object",
            "properties": {
                "about_you": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "displayName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "profileImageURL": {
                    "type": "string"
                },
                "username": {
                    "description": "Pointer allows distinguishing between empty string and not provided",
                    "type": "string"
                }
            }
        },
        "types.UpdateinterestsParams": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.UpdateUserPreferenceProfileParams": {
            "type": "object",
            "required": [
                "profile_name"
            ],
            "properties": {
                "budget_level": {
                    "type": "integer"
                },
                "dietary_needs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "interests": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_default": {
                    "description": "Default is FALSE in DB",
                    "type": "boolean"
                },
                "prefer_accessible_pois": {
                    "type": "boolean"
                },
                "prefer_dog_friendly": {
                    "type": "boolean"
                },
                "prefer_outdoor_seating": {
                    "type": "boolean"
                },
                "preferred_pace": {
                    "$ref": "#/definitions/types.SearchPace"
                },
                "preferred_time": {
                    "$ref": "#/definitions/types.DayPreference"
                },
                "preferred_transport": {
                    "$ref": "#/definitions/types.TransportPreference"
                },
                "preferred_vibes": {
                    "description": "Use empty slice if not provided?",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_name": {
                    "type": "string"
                },
                "search_radius_km": {
                    "type": "number"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "description": "Optional, can be set to nil",
                    "type": "string"
                }
            }
        },
        "types.UpdatesettingsParams": {
            "type": "object",
            "properties": {
                "default_budget_level": {
                    "type": "integer"
                },
                "default_search_radius_km": {
                    "type": "number"
                },
                "prefer_accessible_pois": {
                    "type": "boolean"
                },
                "prefer_dog_friendly": {
                    "type": "boolean"
                },
                "prefer_outdoor_seating": {
                    "type": "boolean"
                },
                "preferred_pace": {
                    "$ref": "#/definitions/types.SearchPace"
                },
                "preferred_time": {
                    "$ref": "#/definitions/types.DayPreference"
                }
            }
        },
        "types.UserPreferenceProfileResponse": {
            "type": "object",
            "properties": {
                "budget_level": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "dietary_needs": {
                    "description": "Assuming TEXT[] maps to []string",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "interests": {
                    "description": "Interests linked to this profile",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Interest"
                    }
                },
                "is_default": {
                    "type": "boolean"
                },
                "prefer_accessible_pois": {
                    "type": "boolean"
                },
                "prefer_dog_friendly": {
                    "type": "boolean"
                },
                "prefer_outdoor_seating": {
                    "type": "boolean"
                },
                "preferred_pace": {
                    "$ref": "#/definitions/types.SearchPace"
                },
                "preferred_time": {
                    "$ref": "#/definitions/types.DayPreference"
                },
                "preferred_transport": {
                    "$ref": "#/definitions/types.TransportPreference"
                },
                "preferred_vibes": {
                    "description": "Assuming TEXT[] maps to []string",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_name": {
                    "type": "string"
                },
                "search_radius_km": {
                    "type": "number"
                },
                "tags": {
                    "description": "Tags to avoid for this profile",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Tags"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "description": "Might omit in some API responses",
                    "type": "string"
                },
                "user_latitude": {
                    "type": "number"
                },
                "user_longitude": {
                    "type": "number"
                }
            }
        },
        "types.UserProfile": {
            "type": "object",
            "properties": {
                "about_you": {
                    "type": "string"
                },
                "age": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "description": "Use pointer if nullable",
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "email_verified_at": {
                    "description": "Use pointer if nullable",
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_login_at": {
                    "description": "Use pointer if nullable",
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "profile_image_url": {
                    "description": "Use pointer if nullable",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "description": "Use pointer if nullable/optional unique",
                    "type": "string"
                }
            }
        },
        "types.settings": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_budget_level": {
                    "type": "integer"
                },
                "default_search_radius_km": {
                    "description": "Use float64 for NUMERIC",
                    "type": "number"
                },
                "prefer_accessible_pois": {
                    "type": "boolean"
                },
                "prefer_dog_friendly": {
                    "type": "boolean"
                },
                "prefer_outdoor_seating": {
                    "type": "boolean"
                },
                "preferred_pace": {
                    "$ref": "#/definitions/types.SearchPace"
                },
                "preferred_time": {
                    "$ref": "#/definitions/types.DayPreference"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "types.ValidateSessionRequest": {
            "type": "object",
            "required": [
                "session_id"
            ],
            "properties": {
                "session_id": {
                    "description": "The session identifier (might be an access token).",
                    "type": "string"
                }
            }
        },
        "types.ValidateSessionResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email associated with the session/token.",
                    "type": "string"
                },
                "user_id": {
                    "description": "User ID associated with the session/token.",
                    "type": "string"
                },
                "username": {
                    "description": "Username associated with the session/token.",
                    "type": "string"
                },
                "valid": {
                    "description": "True if the session/token is valid.",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000 // Adjust to your actual host/port",
	BasePath:         "/api/v1        // Base path for all API routes",
	Schemes:          []string{},
	Title:            "Loci API",
	Description:      "API for personalized city discovery and recommendations.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
